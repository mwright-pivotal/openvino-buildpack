FROM  ubuntu:jammy as base
LABEL maintainer="Mike Wright wrightmi@vmware.com"

# Environments
ENV DEBIAN_FRONTEND=noninteractive
ENV APT_KEY_DONT_WARN_ON_DANGEROUS_USAGE=DontWarn
ENV PIP_DEFAULT_TIMEOUT=100
# ========== ADDED ===========
# 2. Set required CNB information
ENV CNB_USER_ID=1000
ENV CNB_GROUP_ID=1000
ENV CNB_STACK_ID="io.buildpacks.cv.stacks.jammy"
LABEL io.buildpacks.stack.id="io.buildpacks.cv.stacks.jammy"

RUN groupadd cnb --gid ${CNB_GROUP_ID} && \
  useradd --uid ${CNB_USER_ID} --gid ${CNB_GROUP_ID} -m -s /bin/bash cnb

SHELL ["/bin/bash", "-xo", "pipefail", "-c"]

ARG JOBS=4
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install --no-install-recommends -y \
            curl \
            ca-certificates \
            git \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            patch \
            pkg-config \
            wget \
            zlib1g-dev && \
            apt-get clean && \
            rm -rf /var/lib/apt/lists/*

#RUN wget http://nz2.archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.18_amd64.deb
RUN apt-get update && apt-get install -y --no-install-recommends apt-utils && \
  apt install -y intel-opencl-icd && \
  apt-get clean && rm -rf /var/lib/apt/lists/*
#RUN apt install ./libssl1.1_1.1.1f-1ubuntu2.18_amd64.deb

# Video Libraries Dependencies
# hadolint ignore=DL3008,DL3015
RUN apt-get update && apt-get install -y \
    fswebcam \
    libavcodec-dev \
    libavformat-dev \
    libjpeg-dev \
    libpng-dev \
    libswscale-dev \
    libtiff-dev \
    libv4l-dev \
    v4l-utils \
    libffi8 \
    libgl-dev \
    && \
    apt-get clean -y && \
    rm -rf /var/lib/apt/lists/* && \
    rm -rf /var/cache/apt/archives/

RUN ln -s /usr/lib/x86_64-linux-gnu/libffi.so.8.1.0 /usr/lib/x86_64-linux-gnu/libffi.so.6
ENV LD_LIBRARY_PATH=/opt/opencv/lib/:${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu/
# ========== ADDED ===========
# 5. Start a new run stage
# Install dependencies
RUN apt-get update && apt-get install -y curl wget gpg software-properties-common

# Register Intel速 oneAPI APT repository
RUN curl -fsSL https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor --output /usr/share/keyrings/intel-sw-products.gpg
RUN echo "deb [signed-by=/usr/share/keyrings/intel-sw-products.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/intel-oneapi.list

# Download Intel速 Graphics APT repository key
RUN curl -fsSL https://repositories.intel.com/graphics/intel-graphics.key | gpg --dearmor --output /usr/share/keyrings/intel-graphics.gpg

# Register Intel速 Graphics APT repository
RUN echo "deb [arch=amd64 signed-by=/usr/share/keyrings/intel-graphics.gpg] https://repositories.intel.com/gpu/ubuntu jammy/production/2328 unified" | tee /etc/apt/sources.list.d/intel-graphics.list

# Install
RUN apt-get update && apt-get install -y intel-level-zero-gpu level-zero jq
RUN wget $(wget -q -O - https://api.github.com/repos/dlstreamer/dlstreamer/releases/latest | \
  jq -r '.assets[] | select(.name | contains (".deb")) | .browser_download_url')
# Install Intel速 DL Streamer
RUN apt install -y ./*.deb
RUN rm -f ./*.deb

FROM base as run

# 6. Set user and group (as declared in base image)
USER ${CNB_USER_ID}:${CNB_GROUP_ID}
WORKDIR /home/cnb
COPY entrypoint.sh .
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu/"
ENTRYPOINT ["/home/cnb/entrypoint.sh"]

# ========== ADDED ===========
# 7. Start a new build stage
FROM base as build

RUN apt-get -y install git
# ========== ADDED ===========
# 9. Set user and group (as declared in base image)
USER ${CNB_USER_ID}:${CNB_GROUP_ID}
WORKDIR /home/cnb
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/lib/x86_64-linux-gnu/"
